<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#
	Type[] typesToGenerate = new []
	{
		typeof(int), typeof(uint), typeof(long), typeof(ulong), typeof(short), typeof(ushort),
		typeof(float), typeof(double), typeof(bool), typeof(string)
	};
#>
using System;
using System.Collections.Generic;

public static class BytesReader
{
	<# foreach(Type type in typesToGenerate)
	{
	#>
public static Dictionary<IntPtr, List<<#=type.Name#>>> GetAs<#=type.Name #>(BMemory memory)
	{
		int dataSize = 4;
        Dictionary<IntPtr, byte[]> dictionary;

        bool bResult = memory.ReadMemory(out dictionary);

        Dictionary<IntPtr, List<<#=type#>>> outdictionary = new Dictionary<IntPtr, List<<#=type#>>>();

        foreach (IntPtr key in dictionary.Keys)
        {
            byte[] b = dictionary[key];
			List<<#=type#>> l = new List<<#=type#>>();

            for (int i = 0; i < b.Length; i += dataSize)
            {
                <#=type.Name#> val = BitConverter.To<#=type.Name#>(b, i);
                l.Add(val);
            }

			outdictionary.Add(key, l);
         }

		 return outdictionary;
	}

	<#
	}
	#>
}

